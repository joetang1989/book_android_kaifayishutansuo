起因:
    近日因做一个活体存图需求需要保存每个动作(准备、左转、右转、眨眼等)下Camera预览每一帧图像，及人脸关键点信息；每个动作的数据(图片和关键点信息)zip压缩后上传至服务器。
    最开始使用AsyncTask.THREAD_POOL_EXECUTOR去执行，发现耗时较长。后分析了一下，可以分阶段进行处理。
    第一个阶段:写文件--存图、存关键点；
    第二个阶段:zip压缩
    第三个阶段:上传压缩包
    想到这里，不由想起图片加载框架UIL里，图片下载、图片处理、图片显示分别用不同的线程池去处理，加速并发执行任务。因此，我按照上述三个阶段，建立了三个线程池。然在实际运行
    过程中发现，压缩和上传总是比较靠后才执行，且压缩一张640x480大小的图片大约需要0.5s;因此为压缩线程池的核心线程数改为2。另外，每个线程池都可以allowCoreThreadTimeOut
    keepAliveTime(JDK1.6中引入)设置为true，让线程池的核心线程在空闲一定时间后销毁，避免没需要执行的任务时，仍然占用线程资源。
    
那么，接下来，正式开始谈谈线程池。脑海里出现一连串问号。什么是线程池？为什么要用线程池？线程池与线程有什么差？怎么合理使用线程池？    



